#include "stm32f1xx_ll_system.h"

#define STX 0x02
#define ETX 0x03
#define EOT 0x04
#define NAK 0x15
#define ACK 0x06

typedef enum {NOP=0x00, PUR=0x55, CAN=0x41, CON=0x4F, SET_Z=0x45} comandName;
typedef enum {RECIVED=0x01, NOTRECIVED=0x00} reciveState;
typedef enum {DENIED=0x00, APPROVED=0xAA} ackAnswer;

typedef struct {
    comandName cmd; 				//флаг ответа
	uint8_t state; 						//статус пакет принят\не принят
    uint8_t buffer[255];		//буфер принятых данных
		uint8_t position;				//счетчик принятых байт (с учетом нулевого)
		ackAnswer purchConf;		//разрешение на выдачу
		uint32_t pulses;				//количество пульсов
		uint8_t sum;						//сумма 
		} uart_req;

//заполнение, и описание полей реализовано в Parcer(),
//пока не проверял как работает
typedef struct {
		uint8_t  RESP[3];
		uint32_t RC;
		uint8_t  PAN[19];
		uint8_t  DATETIME[14];
		uint8_t  EAID[16];
		uint8_t  HOLDER[26];
		uint8_t  AUTH[8];
		uint8_t  MID[15];
		uint8_t  TID[8];
		uint8_t  SIGN;
		uint32_t INVOICE;
		uint32_t BATCH;
		uint8_t  CARDTYPE[8];
		}purRespBody;	

/***********************************************************/
/**************передача запроса по USART1*******************/
/***********************************************************/
void usart_TX (uint8_t* message, uint8_t size);
		
/***********************************************************/
/**************передача запроса по USART2*******************/
/*************************DEBUG*****************************/
/***********************************************************/
void usart_DEBUG (uint8_t* message, uint8_t size);
		
/***********************************************************/
/**************передача запроса по USART3*******************/
/**************UINT32_T**TU**ASCII**DEBUG*******************/
/***********************************************************/
void usart_DEBUG_ASCII(uint32_t value);

/***********************************************************/
/***********подсчет контрольной суммы LRC*******************/
/***********************************************************/
uint8_t calculate_lrc(uint8_t *message, uint32_t messageSize);

/***********************************************************/
/*****************получение номера инвойса******************/
/***********************************************************/
uint32_t GetInvoice (void);

/***********************************************************/
/*****************проверяем  Responce code******************/
/***********************************************************/
uint8_t GetResponce (void);

/***********************************************************/
/**********************запрос PUR***************************/
/*********принимаем сумму как масив ASCII символов**********/ 
void PURreq_ASCII(uint8_t * number,uint8_t size);


/***********************************************************/
/**********************запрос PUR***************************/
/***********************************************************/
void PURreq (uint32_t amount);

/***********************************************************/
/********************отправляем ACK*************************/
/***********************************************************/
void ACKsend(void);

/***********************************************************/
/**********************запрос EOT***************************/
/***********************************************************/
void EOTreq(void);

/***********************************************************/
/********************отправляем NAK*************************/
/***********************************************************/
void NAKsend(void);

/***********************************************************/
/***********************запрос CAN**************************/
/***********************************************************/
void CANreq(uint32_t invoice);

/***********************************************************/
/***********************запрос CON**************************/
/***********************************************************/
void CONreq(uint32_t invoice);

/***********************************************************/
/**************responce function BPOSLIGHT******************/
/***********************************************************/
void BPOS_cmd_resp(void);

/***********************************************************/
/****************main function BPOSLIGHT********************/
/***********************************************************/
void BPOS_cmd_handler(void);

/***********************************************************/
/*****************parcer of responses***********************/
/***********************************************************/
void Parcer(void);

/***********************************************************/
/***********************sale the item***********************/
/***********************************************************/
void SalePulse(void);

/***********************************************************/
/**************************PULSE****************************/
/***********************************************************/
void Pulse(void);
